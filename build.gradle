buildscript {
	repositories {
		maven { url = 'https://maven.minecraftforge.net/' }
		jcenter()
		mavenCentral()
		maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
	}

	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.+', changing: true
		classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
	}
}
apply plugin: 'net.minecraftforge.gradle'

repositories{
	maven {
		name = "CurseForge"
		url = "https://minecraft.curseforge.com/api/maven/"
	}
	maven {
		name = "ModMaven"
		url = "https://modmaven.dev"
	}
	maven {
		name = "CurseMaven"
		url = "https://www.cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
}
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'


version = '3.5'
group = 'https://github.com/Peculiar-Room' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'species'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
	mappings channel: 'official', version: '1.20.1'
	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')


	// Default run configurations.
	// These can be tweaked, removed, or duplicated as needed.
	runs {
		client {
			workingDirectory project.file('run')
			property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
			arg "-mixin.config="+"species.mixins.json"

			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			mods {
				species {
					source sourceSets.main
				}
			}
		}

		server {
			properties 'mixin.env.remapRefMap': 'true'
			property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
			workingDirectory project.file('run')
			arg "-mixin.config="+"species.mixins.json"


			property 'forge.logging.console.level', 'debug'

			mods {
				species {
					source sourceSets.main
				}
			}
		}

		data {
			properties 'mixin.env.remapRefMap': 'true'
			property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
			workingDirectory project.file('run')
			arg "-mixin.config="+"species.mixins.json"


			property 'forge.logging.console.level', 'debug'

			mods {
				species {
					source sourceSets.main
				}
			}
		}
	}
}
// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
	minecraft "net.minecraftforge:forge:${mc_version}-47.3.1"
	annotationProcessor 'org.spongepowered:mixin:0.8.7:processor'
	runtimeOnly(fg.deobf("curse.maven:spark-361579:4587309"))

	compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}"))
	compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}"))
	runtimeOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}"))
}

mixin {
	add sourceSets.main, "species.refmap.json"
	config 'species.mixins.json'
}
// Example for how to get properties into the manifest for reading by the runtime..
jar {
	manifest {
		attributes([
				"Specification-Title": "species",
				"Specification-Vendor": "Peculiar-Room",
				"Specification-Version": "1.0", // We are version 1 of ourselves
				"Implementation-Title": project.name,
				"Implementation-Version": "${version}",
				"Implementation-Vendor" :"Peculiar-Room",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact jar
		}
	}
	repositories {
		maven {
			url "file:///${project.projectDir}/mcmodsrepo"
		}
	}
}


